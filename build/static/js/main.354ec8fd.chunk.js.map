{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","image/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.354ec8fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n\n    if(!confirmed){\n        return 'Loading...';\n    }\n    \n    return(\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\n export const fetchData = async(country) => {\n     let changeableUrl = url;\n     if(country){\n         changeableUrl = `${url}/countries/${country}`\n     }\n    try{\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n\n       const modifiedData = {\n           confirmed: confirmed,\n           recovered: recovered,\n           deaths: deaths,\n           lastUpdate: lastUpdate,\n       }  \n        return modifiedData;\n    } catch (error){\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try{\n        const {data} = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    }catch(error){\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name); \n    }catch(error){\n        console.log(error);\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';  \nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\n\n    const[dailyData, setDailyData] = useState([]);\n\n    useEffect(() => { \n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        \n\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length ? (<Line\n            data={{\n                labels: dailyData.map(({date})=> date),\n                datasets: [{\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({deaths})=> deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,\n                \n                }],\n            }}\n        />) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        labels: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 225, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)',\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n\n                }}\n                options={{\n                    legend: {display: false},\n                    title: {display: true, text: `Current state in ${country}`},\n                }}\n            />\n\n        ) : null\n    );\n    return(\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState ([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries( await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    console.log(fetchedCountries);\n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value = \"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\n// import Cards from './components/Cards/Cards';\n// import Chart from './components/Chart/Chart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\n\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api/';\n\nimport coronaImage from './image/image.png'\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n\n        this.setState({data: fetchedData, country: country});\n        \n    }\n\n    render(){\n        const { data, country } = this.state;\n\n        return(\n            \n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n                \n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\",\"comtainer\":\"Chart_comtainer__9kmx1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}